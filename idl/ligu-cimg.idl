interface ImgStat {
  void ImgStat();
  attribute any buf;
  attribute long long size;
};

interface CImgWASM8Bit {
  void CImgWASM8Bit();

  void assign(unsigned long x, unsigned long y, unsigned long z, unsigned long c);
  void blur_symmetric(float sigma, optional unsigned long boundary_conditions, optional boolean is_gaussian);
  void blur(float sigma_x, float sigma_y, float sigma_z, optional unsigned short boundary_conditions, optional boolean is_gaussian);
  void fill(octet val, optional octet val2, optional octet val3, optional octet val4);
  void fillC(unsigned short x, unsigned short y, unsigned short z, octet c1, optional octet c2, optional octet c3);
  any data();
  void draw_image([Ref] CImgWASM8Bit t);
  void draw_text(long x0, long y0, DOMString text, octet[] foreground_color, octet[] background_color, float opacity);
  void draw_rectangle(long x0, long y0, long x1, long y1, octet[] color, optional float opacity);
  void draw_circle(long x0, long y0, long radius, octet[] color);
  void draw_fill(long x, long y, long z, octet[] color, optional float opacity);
  void save(DOMString filename);
  void resize(long x, optional long y, optional long z, optional long c, optional long algorithm_t, optional unsigned short condition, optional float cx, optional float cy, optional float cz, optional float cc);

  // customized
  [Value] ImgStat exportPNG();
  [Value] ImgStat exportJPEG(optional octet quality);
  
  long height();
  long width();
  long spectrum();
  long depth();
  long size();

  void invert();
  void resize_halfXY();
  void resize_doubleXY();
};
